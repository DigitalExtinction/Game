name: Rust

on:
  push:
    branches:
      - main
  merge_group: {}
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings
  RUSTDOCFLAGS: --deny warnings

jobs:
  build:
    name: Build & Test
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v3
        with:
          path: .git/lfs
          key: lfs-${{ runner.os }}-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Rust Cache
        uses: actions/cache@v3
        id: rust-cache
        with:
          path:  |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: tests-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            tests-${{ runner.os }}-

      - name: Install Linux Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev
      - run: rustc --version && cargo --version && cargo clippy --version
      - name: Build
        run: cargo build --verbose --all-targets --all-features
      - name: Clippy
        run: cargo clippy --all --all-targets --all-features --workspace -- --deny warnings
      - name: Test
        run: cargo test --verbose --all-features --workspace
      - name: Build Docs
        run: cargo doc --no-deps --all-features --workspace

  format:
    name: Test Formatting
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo +nightly fmt --version
      - run: cargo +nightly fmt --all -- --check

  udeps:
    name: Check Unused Dependencies
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: udeps-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            udeps-${{ runner.os }}-
      - uses: dtolnay/rust-toolchain@nightly
      - name: Install cargo-udeps
        run: cargo install --force cargo-udeps
      - name: Install alsa and udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: Run cargo-udeps
        run: cargo udeps

  build_release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull

      - uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache
        uses: actions/cache@v3
        id: rust-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: build-release-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Linux Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev
      - run: rustc --version && cargo --version
      - name: Install cargo-auditable
        run: cargo install --force cargo-auditable
      - name: Build
        env:
          RUSTFLAGS: '-C target-feature=+sse3,+avx'
        run: cargo auditable build --release

      - name: Prepare Build Files
        shell: bash
        run: |
          mkdir pack
          mv target/release/de_game pack/de || :
          mv target/release/de_game.exe pack/de.exe || :
          mv assets pack/
      - name: Store Release Build
        uses: actions/upload-artifact@v3
        with:
          name: de-binary-${{ runner.os }}
          path: pack
