name: Release

on:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build_release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Rust Cache
        uses: actions/cache@v3
        id: rust-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: build-release-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Linux Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev

      - run: rustc --version && cargo --version
      - name: Build
        run: cargo build --release

      - name: Prepare Assets
        run: |
          mkdir pack
          mv assets pack/
      - name: Prepare UNIX Binary
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: mv target/release/de_game pack/de
      - name: Prepare Windows Binary
        if: ${{ matrix.os == 'windows-latest' }}
        run: mv target/release/de_game.exe pack/de.exe

      - name: Store Release Build
        uses: actions/upload-artifact@v3
        with:
          name: de-binary-${{ runner.os }}
          path: pack
